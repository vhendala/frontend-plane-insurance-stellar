import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement, useState } from "react";
import { Label } from "../Label";
import { Icon } from "../../icons";
import { FieldNote } from "../utils/FieldNote";
import { InputCopyButton } from "../utils/InputCopyButton";
import "./styles.scss";
export var Input = function (_a) {
    var customInput = _a.customInput, id = _a.id, label = _a.label, labelSuffix = _a.labelSuffix, fieldSize = _a.fieldSize, isLabelUppercase = _a.isLabelUppercase, isError = _a.isError, isPassword = _a.isPassword, rightElement = _a.rightElement, leftElement = _a.leftElement, note = _a.note, error = _a.error, success = _a.success, copyButton = _a.copyButton, infoText = _a.infoText, _b = _a.infoTextIcon, infoTextIcon = _b === void 0 ? _jsx(Icon.InfoCircle, {}) : _b, infoLink = _a.infoLink, _c = _a.infoLinkIcon, infoLinkIcon = _c === void 0 ? _jsx(Icon.BookOpen01, {}) : _c, tooltipPlacement = _a.tooltipPlacement, props = __rest(_a, ["customInput", "id", "label", "labelSuffix", "fieldSize", "isLabelUppercase", "isError", "isPassword", "rightElement", "leftElement", "note", "error", "success", "copyButton", "infoText", "infoTextIcon", "infoLink", "infoLinkIcon", "tooltipPlacement"]);
    var _d = useState(true), isPasswordMasked = _d[0], setIsPasswordMasked = _d[1];
    var additionalClasses = __spreadArray(__spreadArray([
        "Input--".concat(fieldSize)
    ], (props.disabled ? ["Input--disabled"] : []), true), (isError || error ? ["Input--error"] : []), true).join(" ");
    var baseInputProps = {
        id: id,
        "aria-invalid": !!(isError || error),
    };
    var renderCopyButton = function () { return (_jsx(InputCopyButton, { fieldSize: fieldSize, textToCopy: props.value ? props.value.toString() : "", showLabel: copyButton === null || copyButton === void 0 ? void 0 : copyButton.showLabel })); };
    return (_jsxs("div", { className: "Input ".concat(additionalClasses), children: [label && (_jsx(Label, { htmlFor: id, isUppercase: isLabelUppercase, size: fieldSize, labelSuffix: labelSuffix, infoText: infoText, infoTextIcon: infoTextIcon, infoLink: infoLink, infoLinkIcon: infoLinkIcon, tooltipPlacement: tooltipPlacement, children: label })), _jsxs("div", { className: "Input__container", children: [(copyButton === null || copyButton === void 0 ? void 0 : copyButton.position) === "left" ? (_jsx("div", { className: "Input__copyButton Input__copyButton--left", children: renderCopyButton() })) : null, leftElement && (_jsx("div", { className: "Input__side-element Input__side-element--left", children: leftElement })), customInput ? (cloneElement(customInput, __assign(__assign({}, baseInputProps), props))) : (_jsx("input", __assign({}, baseInputProps, props, (isPassword
                        ? { type: isPasswordMasked ? "password" : "text" }
                        : {})))), isPassword && (_jsx("div", { className: "Input__side-element Input__side-element--left", children: _jsx("button", { className: "PasswordMaskToggle", type: "button", onClick: function (event) {
                                event === null || event === void 0 ? void 0 : event.preventDefault();
                                setIsPasswordMasked(!isPasswordMasked);
                            }, children: isPasswordMasked ? _jsx(Icon.EyeOff, {}) : _jsx(Icon.Eye, {}) }) })), rightElement && (_jsx("div", { className: "Input__side-element Input__side-element--right", children: rightElement })), (copyButton === null || copyButton === void 0 ? void 0 : copyButton.position) === "right" ? (_jsx("div", { className: "Input__copyButton Input__copyButton--right", children: renderCopyButton() })) : null] }), note && _jsx(FieldNote, { size: fieldSize, children: note }), error && (_jsx(FieldNote, { size: fieldSize, variant: "error", children: error })), success && (_jsx(FieldNote, { size: fieldSize, variant: "success", children: success }))] }));
};
Input.displayName = "Input";
//# sourceMappingURL=index.js.map