import { __assign, __awaiter, __generator } from "tslib";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useLayoutEffect, useState, cloneElement, useRef, } from "react";
import { computePosition, flip, offset as floatingOffset, shift, arrow, } from "@floating-ui/dom";
import { ReactComponent as ArrowIcon } from "./arrow.svg";
import "./styles.scss";
var getActualTooltipPlacement = function (placement, floaterX, floaterY) {
    if (placement.includes("bottom") && floaterY < 0) {
        return placement.replace("bottom", "top");
    }
    if (placement.includes("top") && floaterY > 0) {
        return placement.replace("top", "bottom");
    }
    if (placement.includes("left") && floaterX > 0) {
        return placement.replace("left", "right");
    }
    if (placement.includes("right") && floaterX < 0) {
        return placement.replace("right", "left");
    }
    return placement;
};
var getArrowStyle = function (_a) {
    var x = _a.x, y = _a.y, placement = _a.placement, floaterX = _a.floaterX, floaterY = _a.floaterY;
    var basePos = {
        top: "auto",
        bottom: "auto",
        left: "auto",
        right: "auto",
    };
    var actualPlacement = getActualTooltipPlacement(placement, floaterX || 0, floaterY || 0);
    switch (actualPlacement) {
        case "top":
            return __assign(__assign({}, basePos), { right: "".concat(x, "px"), transform: "rotate(180deg)" });
        case "top-start":
            return __assign(__assign({}, basePos), { transform: "rotate(180deg)" });
        case "top-end":
            return __assign(__assign({}, basePos), { right: "0px", transform: "rotate(180deg)" });
        case "bottom":
            return __assign(__assign({}, basePos), { top: "-12px", right: "".concat(x, "px"), transform: "rotate(0deg)" });
        case "bottom-start":
            return __assign(__assign({}, basePos), { top: "-12px", transform: "rotate(0deg)" });
        case "bottom-end":
            return __assign(__assign({}, basePos), { top: "-12px", right: "0px", transform: "rotate(0deg)" });
        case "left":
        case "left-start":
        case "left-end":
            return __assign(__assign({}, basePos), { right: "-26px", top: "".concat(y, "px"), transform: "rotate(90deg)" });
        case "right":
        case "right-start":
        case "right-end":
            return __assign(__assign({}, basePos), { left: "-26px", top: "".concat(y, "px"), transform: "rotate(270deg)" });
        default:
            return basePos;
    }
};
export var Floater = function (_a) {
    var triggerEl = _a.triggerEl, children = _a.children, placement = _a.placement, isVisible = _a.isVisible, _b = _a.offset, offset = _b === void 0 ? 8 : _b, _c = _a.padding, padding = _c === void 0 ? 24 : _c, hasActiveInsideClick = _a.hasActiveInsideClick, _d = _a.isContrast, isContrast = _d === void 0 ? true : _d, _e = _a.showArrow, showArrow = _e === void 0 ? false : _e, callback = _a.callback;
    var parentRef = useRef(null);
    var floaterRef = useRef(null);
    var floaterArrowRef = useRef(null);
    var _f = useState(Boolean(isVisible)), isFloaterOpen = _f[0], setIsFloaterOpen = _f[1];
    var isStatic = isVisible !== undefined;
    var triggerClass = "trigger";
    var triggerActiveClass = "trigger--active";
    var delay = 150;
    var openFloater = useCallback(function () {
        var _a;
        var computeFloaterPosition = function () { return __awaiter(void 0, void 0, void 0, function () {
            var arrowEl, _a, x, y, middlewareData, _b, arrowX, arrowY;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        arrowEl = showArrow && (floaterArrowRef === null || floaterArrowRef === void 0 ? void 0 : floaterArrowRef.current);
                        if (!((parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && (floaterRef === null || floaterRef === void 0 ? void 0 : floaterRef.current))) return [3, 2];
                        return [4, computePosition(parentRef.current, floaterRef.current, {
                                placement: placement,
                                middleware: [
                                    floatingOffset(arrowEl ? Number(offset + 6) : offset),
                                    flip(),
                                    shift({ padding: padding }),
                                    arrowEl && arrow({ element: arrowEl, padding: 5 }),
                                ],
                            })];
                    case 1:
                        _a = _c.sent(), x = _a.x, y = _a.y, middlewareData = _a.middlewareData;
                        Object.assign(floaterRef.current.style, {
                            left: "".concat(x, "px"),
                            top: "".concat(y, "px"),
                            transform: "translateX(0)",
                        });
                        if (arrowEl && middlewareData.arrow) {
                            _b = middlewareData.arrow, arrowX = _b.x, arrowY = _b.y;
                            Object.assign(arrowEl.style, getArrowStyle({
                                x: arrowX,
                                y: arrowY,
                                placement: placement,
                                floaterX: x,
                                floaterY: y,
                            }));
                        }
                        _c.label = 2;
                    case 2: return [2];
                }
            });
        }); };
        (_a = parentRef.current) === null || _a === void 0 ? void 0 : _a.classList.add(triggerClass);
        computeFloaterPosition();
        var t = setTimeout(function () {
            var _a, _b;
            if ((_a = parentRef.current) === null || _a === void 0 ? void 0 : _a.classList.contains(triggerClass)) {
                (_b = parentRef.current) === null || _b === void 0 ? void 0 : _b.classList.add(triggerActiveClass);
                clearTimeout(t);
                setIsFloaterOpen(true);
            }
        }, delay);
    }, [offset, padding, placement, showArrow]);
    var closeFloater = useCallback(function () {
        var _a;
        (_a = parentRef.current) === null || _a === void 0 ? void 0 : _a.classList.remove(triggerActiveClass);
        var t = setTimeout(function () {
            var _a;
            (_a = parentRef.current) === null || _a === void 0 ? void 0 : _a.classList.remove(triggerClass);
            clearTimeout(t);
            setIsFloaterOpen(false);
        }, delay);
    }, []);
    var toggleFloater = useCallback(function (isOpen) {
        if (isOpen) {
            openFloater();
        }
        else {
            closeFloater();
        }
        if (callback) {
            callback(isOpen);
        }
    }, [callback, openFloater, closeFloater]);
    var handleClickOutside = useCallback(function (event) {
        var _a;
        if (isStatic ||
            (((_a = floaterRef === null || floaterRef === void 0 ? void 0 : floaterRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) &&
                !hasActiveInsideClick)) {
            return;
        }
        toggleFloater(false);
    }, [hasActiveInsideClick, isStatic, toggleFloater]);
    useLayoutEffect(function () {
        if (isVisible !== undefined) {
            toggleFloater(isVisible);
        }
    }, [isVisible, toggleFloater]);
    useLayoutEffect(function () {
        if (isFloaterOpen) {
            document.addEventListener("pointerup", handleClickOutside);
        }
        else {
            document.removeEventListener("pointerup", handleClickOutside);
        }
        return function () {
            document.removeEventListener("pointerup", handleClickOutside);
        };
    }, [isFloaterOpen, handleClickOutside]);
    return (_jsxs("div", { className: "Floater", ref: parentRef, children: [_jsx(_Fragment, { children: isStatic
                    ? triggerEl
                    : cloneElement(triggerEl, {
                        onClick: toggleFloater,
                    }) }), _jsxs("div", { ref: floaterRef, className: "Floater__content", "data-is-contrast": isContrast, children: [children, showArrow ? (_jsx("div", { className: "Floater__arrow", ref: floaterArrowRef, children: _jsx(ArrowIcon, {}) })) : null] })] }));
};
//# sourceMappingURL=index.js.map