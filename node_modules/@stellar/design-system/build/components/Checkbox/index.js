import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FieldNote } from "../utils/FieldNote";
import { Icon } from "../../icons";
import "./styles.scss";
export var Checkbox = function (_a) {
    var id = _a.id, fieldSize = _a.fieldSize, label = _a.label, note = _a.note, error = _a.error, success = _a.success, isError = _a.isError, props = __rest(_a, ["id", "fieldSize", "label", "note", "error", "success", "isError"]);
    var additionalClasses = __spreadArray(__spreadArray([
        "Checkbox--".concat(fieldSize)
    ], (props.disabled ? ["Checkbox--disabled"] : []), true), (isError || error ? ["Checkbox--error"] : []), true).join(" ");
    var baseCheckboxProps = {
        id: id,
        "aria-invalid": !!(isError || error),
    };
    return (_jsxs("div", { className: "Checkbox ".concat(additionalClasses), children: [_jsxs("div", { className: "Checkbox__container", children: [_jsx("input", __assign({ type: "checkbox" }, baseCheckboxProps, props)), _jsxs("label", { htmlFor: id, children: [_jsx("span", { "aria-hidden": "true", "data-has-label": !!label, children: _jsx(Icon.Check, {}) }), label ? label : null] })] }), note && _jsx(FieldNote, { size: fieldSize, children: note }), error && (_jsx(FieldNote, { size: fieldSize, variant: "error", children: error })), success && (_jsx(FieldNote, { size: fieldSize, variant: "success", children: success }))] }));
};
Checkbox.displayName = "Checkbox";
//# sourceMappingURL=index.js.map