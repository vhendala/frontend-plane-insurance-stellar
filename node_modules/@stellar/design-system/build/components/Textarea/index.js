import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement } from "react";
import { Label } from "../Label";
import { Icon } from "../../icons";
import { FieldNote } from "../utils/FieldNote";
import { InputCopyButton } from "../utils/InputCopyButton";
import "./styles.scss";
export var Textarea = function (_a) {
    var id = _a.id, fieldSize = _a.fieldSize, _b = _a.children, children = _b === void 0 ? "" : _b, label = _a.label, labelSuffix = _a.labelSuffix, note = _a.note, error = _a.error, success = _a.success, infoText = _a.infoText, _c = _a.infoTextIcon, infoTextIcon = _c === void 0 ? _jsx(Icon.InfoCircle, {}) : _c, infoLink = _a.infoLink, _d = _a.infoLinkIcon, infoLinkIcon = _d === void 0 ? _jsx(Icon.BookOpen01, {}) : _d, tooltipPlacement = _a.tooltipPlacement, isError = _a.isError, isLabelUppercase = _a.isLabelUppercase, hasCopyButton = _a.hasCopyButton, customTextarea = _a.customTextarea, _e = _a.spellCheck, spellCheck = _e === void 0 ? false : _e, _f = _a.autoComplete, autoComplete = _f === void 0 ? "off" : _f, props = __rest(_a, ["id", "fieldSize", "children", "label", "labelSuffix", "note", "error", "success", "infoText", "infoTextIcon", "infoLink", "infoLinkIcon", "tooltipPlacement", "isError", "isLabelUppercase", "hasCopyButton", "customTextarea", "spellCheck", "autoComplete"]);
    var additionalClasses = __spreadArray(__spreadArray([
        "Textarea--".concat(fieldSize)
    ], (props.disabled ? ["Textarea--disabled"] : []), true), (isError || error ? ["Textarea--error"] : []), true).join(" ");
    var baseTextareaProps = {
        id: id,
        "aria-invalid": !!(isError || error),
        spellCheck: spellCheck,
        autoComplete: autoComplete,
    };
    var val = (props.value || children);
    return (_jsxs("div", { className: "Textarea ".concat(additionalClasses), children: [label && (_jsx(Label, { htmlFor: id, isUppercase: isLabelUppercase, size: fieldSize, labelSuffix: labelSuffix, infoText: infoText, infoTextIcon: infoTextIcon, infoLink: infoLink, infoLinkIcon: infoLinkIcon, tooltipPlacement: tooltipPlacement, children: label })), customTextarea ? (cloneElement(customTextarea, __assign(__assign({}, baseTextareaProps), props))) : (_jsx("textarea", __assign({}, baseTextareaProps, props, { children: val }))), (note || error || success || hasCopyButton) && (_jsxs("div", { className: "Textarea__footer", children: [_jsxs("div", { className: "Textarea__footer__notes", children: [note && _jsx(FieldNote, { size: fieldSize, children: note }), error && (_jsx(FieldNote, { size: fieldSize, variant: "error", children: error })), success && (_jsx(FieldNote, { size: fieldSize, variant: "success", children: success }))] }), hasCopyButton ? (_jsx(InputCopyButton, { fieldSize: fieldSize, textToCopy: val })) : null] }))] }));
};
Textarea.displayName = "Textarea";
//# sourceMappingURL=index.js.map