import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement } from "react";
import "./styles.scss";
export var Link = function (_a) {
    var children = _a.children, _b = _a.variant, variant = _b === void 0 ? "primary" : _b, size = _a.size, icon = _a.icon, _c = _a.iconPosition, iconPosition = _c === void 0 ? "right" : _c, isDisabled = _a.isDisabled, isUnderline = _a.isUnderline, isUppercase = _a.isUppercase, customAnchor = _a.customAnchor, addlClassName = _a.addlClassName, props = __rest(_a, ["children", "variant", "size", "icon", "iconPosition", "isDisabled", "isUnderline", "isUppercase", "customAnchor", "addlClassName"]);
    var href = props.href, onClick = props.onClick;
    var isExternalLink = (href === null || href === void 0 ? void 0 : href.startsWith("http")) || (href === null || href === void 0 ? void 0 : href.startsWith("//"));
    var handleClick = function (event) {
        if (onClick && !isDisabled) {
            event.preventDefault();
            onClick(event);
        }
    };
    var customProps = __assign(__assign(__assign({}, (isExternalLink && !isDisabled
        ? { rel: "noreferrer noopener", target: "_blank" }
        : {})), (href && isDisabled ? { href: undefined } : { href: href })), (onClick
        ? {
            onClick: handleClick,
            role: "button",
        }
        : {}));
    var additionalClasses = __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([
        "Link--".concat(variant)
    ], (size ? ["Link--".concat(size)] : []), true), (isDisabled ? ["Link--disabled"] : []), true), (isUnderline ? ["Link--underline"] : []), true), (isUppercase ? ["Link--uppercase"] : []), true), (addlClassName ? addlClassName.split(" ") : []), true).join(" ");
    var renderIcon = function (position) {
        if (icon && iconPosition === position) {
            return _jsx("span", { className: "Link__icon", children: icon });
        }
        return null;
    };
    var renderAnchorContent = function () { return (_jsxs(_Fragment, { children: [renderIcon("left"), children, renderIcon("right")] })); };
    var anchorProps = __assign(__assign(__assign({ className: "Link ".concat(additionalClasses) }, props), customProps), { children: renderAnchorContent() });
    return customAnchor ? (cloneElement(customAnchor, anchorProps)) : (_jsx("a", __assign({}, anchorProps)));
};
Link.displayName = "Link";
//# sourceMappingURL=index.js.map