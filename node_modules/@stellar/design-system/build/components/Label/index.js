import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Tooltip } from "../Tooltip";
import { Icon } from "../../icons";
import "./styles.scss";
export var Label = function (_a) {
    var children = _a.children, htmlFor = _a.htmlFor, _b = _a.size, size = _b === void 0 ? "sm" : _b, isUppercase = _a.isUppercase, labelSuffix = _a.labelSuffix, infoText = _a.infoText, _c = _a.infoTextIcon, infoTextIcon = _c === void 0 ? _jsx(Icon.InfoCircle, {}) : _c, infoLink = _a.infoLink, _d = _a.infoLinkIcon, infoLinkIcon = _d === void 0 ? _jsx(Icon.BookOpen01, {}) : _d, tooltipPlacement = _a.tooltipPlacement, props = __rest(_a, ["children", "htmlFor", "size", "isUppercase", "labelSuffix", "infoText", "infoTextIcon", "infoLink", "infoLinkIcon", "tooltipPlacement"]);
    var additionalClasses = __spreadArray([
        "Label--".concat(size)
    ], (isUppercase ? ["Label--uppercase"] : []), true).join(" ");
    return (_jsxs("div", { className: "Label__wrapper", children: [_jsxs("label", __assign({ className: "Label ".concat(additionalClasses), htmlFor: htmlFor }, props, { children: [children, labelSuffix ? (_jsxs("span", { className: "Label__suffix", children: ["(", labelSuffix, ")"] })) : null] })), infoLink ? (_jsx("a", { href: infoLink, className: "Label__infoButton", rel: "noreferrer noopener", target: "_blank", children: infoLinkIcon })) : null, infoText ? (_jsx(Tooltip, { triggerEl: _jsx("div", { className: "Label__infoButton", role: "button", children: infoTextIcon }), placement: tooltipPlacement, children: infoText })) : null] }));
};
Label.displayName = "Label";
//# sourceMappingURL=index.js.map