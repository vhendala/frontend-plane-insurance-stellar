import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement } from "react";
import { Avatar } from "../Avatar";
import { CopyText } from "../CopyText";
import { Icon } from "../../icons";
import "./styles.scss";
export var Profile = function (_a) {
    var publicAddress = _a.publicAddress, size = _a.size, federatedAddress = _a.federatedAddress, isShort = _a.isShort, onClick = _a.onClick, href = _a.href, hideAvatar = _a.hideAvatar, isCopy = _a.isCopy, customAnchor = _a.customAnchor;
    var address = federatedAddress !== null && federatedAddress !== void 0 ? federatedAddress : publicAddress;
    var additionalClasses = __spreadArray(__spreadArray(__spreadArray([
        "Profile--".concat(size)
    ], (onClick ? ["Profile--button"] : []), true), (href ? ["Profile--link"] : []), true), (isCopy ? ["Profile--copy"] : []), true).join(" ");
    var Component = function (_a) {
        var props = __rest(_a, []);
        var isExternalLink = (href === null || href === void 0 ? void 0 : href.startsWith("http")) || (href === null || href === void 0 ? void 0 : href.startsWith("//"));
        var componentProps = __assign(__assign(__assign({}, props), (isExternalLink
            ? { rel: "noreferrer noopener", target: "_blank" }
            : {})), { className: "Profile ".concat(additionalClasses) });
        if (onClick) {
            return _jsx("button", __assign({}, componentProps, { onClick: onClick }));
        }
        else if (href) {
            if (customAnchor) {
                return cloneElement(customAnchor, __assign(__assign({}, componentProps), { href: href }));
            }
            return _jsx("a", __assign({}, componentProps, { href: href }));
        }
        if (isCopy) {
            return (_jsx(CopyText, { textToCopy: address, doneLabel: "Copied address", children: _jsxs("div", __assign({}, componentProps, { children: [props.children, " ", _jsx("div", { className: "Profile--copy__icon", children: _jsx(Icon.Copy01, {}) })] })) }));
        }
        return _jsx("div", __assign({}, componentProps));
    };
    return (_jsxs(Component, { children: [hideAvatar ? null : _jsx(Avatar, { size: size, publicAddress: publicAddress }), _jsx("div", { className: "Profile__address", title: address, children: isShort ? shortenAddress(address) : address })] }));
};
var shortenAddress = function (address) {
    if (!address) {
        return "";
    }
    var isValidFederatedAddress = address.split("*").length > 1;
    if (isValidFederatedAddress) {
        return "".concat(address.slice(0, 10), "\u2026");
    }
    return "".concat(address.slice(0, 5), "\u2026").concat(address.slice(-5));
};
Profile.displayName = "Profile";
//# sourceMappingURL=index.js.map