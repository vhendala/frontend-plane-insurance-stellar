import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from "../Button";
import { Card } from "../Card";
import { Heading } from "../Typography";
import { Icon } from "../../icons";
import { Link } from "../Link";
import { NavButton } from "../NavButton";
import "./styles.scss";
export var Alert = function (_a) {
    var variant = _a.variant, placement = _a.placement, title = _a.title, onClose = _a.onClose, onAction = _a.onAction, actionLink = _a.actionLink, _b = _a.actionLabel, actionLabel = _b === void 0 ? "Action" : _b, _c = _a.icon, icon = _c === void 0 ? _jsx(Icon.InfoCircle, {}) : _c, children = _a.children;
    if (placement === "bottom" && actionLink) {
        throw Error("Bottom alert cannot use `actionLink` because it's a button. Use `onAction` instead.");
    }
    var getActionVariant = function () {
        if (placement === "inline") {
            return variant === "error" ? "error" : "primary";
        }
        else {
            if (variant === "primary") {
                return "primary";
            }
            if (variant === "error") {
                return "error";
            }
            return "secondary";
        }
    };
    var renderDismissElement = function () {
        if (!onClose) {
            return null;
        }
        if (placement === "inline") {
            return (_jsx(Link, { variant: "secondary", role: "button", onClick: onClose, children: "Dismiss" }));
        }
        return (_jsx(Button, { variant: "tertiary", onClick: onClose, size: "md", children: "Dismiss" }));
    };
    var renderActionElement = function () {
        if (!(onAction || actionLink)) {
            return null;
        }
        if (placement === "inline") {
            return (_jsx(Link, { variant: getActionVariant(), role: onAction ? "button" : "link", onClick: onAction, href: actionLink, children: actionLabel }));
        }
        return (_jsx(Button, { variant: getActionVariant(), onClick: onClose, size: "md", children: actionLabel }));
    };
    var renderAlert = function () {
        return (_jsxs("div", { role: "alert", className: "Alert Alert--".concat(variant, " Alert--").concat(placement), children: [_jsxs("div", { className: "Alert__content", children: [_jsx("div", { className: "Alert__content__iconContainer", children: _jsx("div", { className: "Alert__icon", children: icon }) }), _jsxs("div", { className: "Alert__content__contentContainer", children: [_jsxs("div", { className: "Alert__content__textContainer", children: [title ? (_jsx(Heading, { as: "h2", size: "xs", children: title })) : null, _jsx("div", { children: children })] }), onClose || onAction || actionLink ? (_jsxs("div", { className: "Alert__content__buttons", children: [renderDismissElement(), renderActionElement()] })) : null] })] }), onClose ? (_jsx("div", { className: "Alert__close", children: _jsx(NavButton, { icon: _jsx(Icon.XClose, {}), onClick: onClose, title: "Close alert" }) })) : null] }));
    };
    return placement === "inline" ? (_jsx(Card, { noPadding: true, variant: variant === "secondary" ? "secondary" : "primary", children: renderAlert() })) : (_jsx("div", { className: "AlertContainer", children: renderAlert() }));
};
Alert.displayName = "Alert";
//# sourceMappingURL=index.js.map