import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { cloneElement } from "react";
import { Label } from "../Label";
import { Icon } from "../../icons";
import { FieldNote } from "../utils/FieldNote";
import "./styles.scss";
export var Select = function (_a) {
    var id = _a.id, fieldSize = _a.fieldSize, children = _a.children, label = _a.label, labelSuffix = _a.labelSuffix, note = _a.note, error = _a.error, success = _a.success, infoText = _a.infoText, _b = _a.infoTextIcon, infoTextIcon = _b === void 0 ? _jsx(Icon.InfoCircle, {}) : _b, infoLink = _a.infoLink, _c = _a.infoLinkIcon, infoLinkIcon = _c === void 0 ? _jsx(Icon.BookOpen01, {}) : _c, tooltipPlacement = _a.tooltipPlacement, isLabelUppercase = _a.isLabelUppercase, isError = _a.isError, customSelect = _a.customSelect, props = __rest(_a, ["id", "fieldSize", "children", "label", "labelSuffix", "note", "error", "success", "infoText", "infoTextIcon", "infoLink", "infoLinkIcon", "tooltipPlacement", "isLabelUppercase", "isError", "customSelect"]);
    var additionalClasses = __spreadArray(__spreadArray([
        "Select--".concat(fieldSize)
    ], (props.disabled ? ["Select--disabled"] : []), true), (isError || error ? ["Select--error"] : []), true).join(" ");
    var baseSelectProps = {
        id: id,
        "aria-invalid": !!(isError || error),
    };
    return (_jsxs("div", { className: "Select ".concat(additionalClasses), children: [label && (_jsx(Label, { htmlFor: id, isUppercase: isLabelUppercase, size: fieldSize, labelSuffix: labelSuffix, infoText: infoText, infoTextIcon: infoTextIcon, infoLink: infoLink, infoLinkIcon: infoLinkIcon, tooltipPlacement: tooltipPlacement, children: label })), _jsx("div", { className: "Select__container", children: customSelect ? (cloneElement(customSelect, __assign(__assign({}, baseSelectProps), props))) : (_jsxs(_Fragment, { children: [_jsx("select", __assign({}, baseSelectProps, props, { children: children })), _jsx("span", { className: "Select__icon", "aria-hidden": "true", children: _jsx(Icon.ChevronDown, {}) })] })) }), note && _jsx(FieldNote, { size: fieldSize, children: note }), error && (_jsx(FieldNote, { size: fieldSize, variant: "error", children: error })), success && (_jsx(FieldNote, { size: fieldSize, variant: "success", children: success }))] }));
};
Select.displayName = "Select";
//# sourceMappingURL=index.js.map