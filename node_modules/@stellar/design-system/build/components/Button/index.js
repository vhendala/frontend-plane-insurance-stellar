import { __assign, __rest, __spreadArray } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { Loader } from "../Loader";
import { Tooltip } from "../Tooltip";
import "./styles.scss";
export var Button = function (_a) {
    var variant = _a.variant, size = _a.size, children = _a.children, icon = _a.icon, _b = _a.iconPosition, iconPosition = _b === void 0 ? "right" : _b, isLoading = _a.isLoading, isFullWidth = _a.isFullWidth, isRounded = _a.isRounded, _c = _a.showActionTooltip, showActionTooltip = _c === void 0 ? false : _c, _d = _a.actionTooltipText, actionTooltipText = _d === void 0 ? "Done" : _d, _e = _a.actionTooltipPlacement, actionTooltipPlacement = _e === void 0 ? "bottom" : _e, props = __rest(_a, ["variant", "size", "children", "icon", "iconPosition", "isLoading", "isFullWidth", "isRounded", "showActionTooltip", "actionTooltipText", "actionTooltipPlacement"]);
    var _f = useState(false), isTooltipVisible = _f[0], setIsTooltipVisible = _f[1];
    useEffect(function () {
        if (isTooltipVisible) {
            var t_1 = setTimeout(function () {
                setIsTooltipVisible(false);
                clearTimeout(t_1);
            }, 1000);
        }
    }, [isTooltipVisible]);
    var additionalClasses = __spreadArray(__spreadArray([
        "Button--".concat(variant),
        "Button--".concat(size)
    ], (isFullWidth ? ["Button--full-width"] : []), true), (isRounded ? ["Button--rounded"] : []), true).join(" ");
    var renderIcon = function (position) {
        if (!icon && isLoading && position === "right") {
            return _jsx(Loader, {});
        }
        if (icon && iconPosition === position) {
            if (isLoading) {
                return _jsx(Loader, {});
            }
            return _jsx("span", { className: "Button__icon", children: icon });
        }
        return null;
    };
    var renderButton = function () {
        return (_jsxs("button", __assign({ className: "Button ".concat(additionalClasses) }, props, (isLoading ? { disabled: true } : {}), (props.onClick
            ? {
                onClick: function (event) {
                    if (props.onClick) {
                        props.onClick(event);
                        if (showActionTooltip) {
                            setIsTooltipVisible(true);
                        }
                    }
                },
            }
            : {}), { children: [renderIcon("left"), children !== null && children !== void 0 ? children : null, renderIcon("right")] })));
    };
    if (showActionTooltip) {
        return (_jsx(Tooltip, { triggerEl: renderButton(), isVisible: isTooltipVisible, placement: actionTooltipPlacement, children: actionTooltipText }));
    }
    return renderButton();
};
Button.displayName = "Button";
//# sourceMappingURL=index.js.map