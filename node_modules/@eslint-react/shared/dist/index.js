//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

//#endregion
let node_module = require("node:module");
node_module = __toESM(node_module);
let __eslint_react_eff = require("@eslint-react/eff");
__eslint_react_eff = __toESM(__eslint_react_eff);
let ts_pattern = require("ts-pattern");
ts_pattern = __toESM(ts_pattern);
let __eslint_react_kit = require("@eslint-react/kit");
__eslint_react_kit = __toESM(__eslint_react_kit);
let zod_v4 = require("zod/v4");
zod_v4 = __toESM(zod_v4);

//#region src/constants.ts
/**
* The NPM scope for this project.
*/
const NPM_SCOPE = "@eslint-react";
/**
* The GitHub repository for this project.
*/
const GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
/**
* The URL to the project's website.
*/
const WEBSITE_URL = "https://eslint-react.xyz";

//#endregion
//#region src/get-config-adapters.ts
function getConfigAdapters(pluginName, plugin) {
	function toFlatConfig(config) {
		return {
			...config,
			plugins: { [pluginName]: plugin }
		};
	}
	function toLegacyConfig({ rules }) {
		return {
			plugins: [pluginName],
			rules
		};
	}
	return {
		toFlatConfig,
		toLegacyConfig
	};
}

//#endregion
//#region src/get-doc-url.ts
/**
* Get the URL for the documentation of a rule in a plugin.
* @internal
* @param pluginName The name of the plugin.
* @returns The URL for the documentation of a rule.
*/
const getDocsUrl = (pluginName) => (ruleName) => {
	if (pluginName === "x") return `${WEBSITE_URL}/docs/rules/${ruleName}`;
	return `${WEBSITE_URL}/docs/rules/${pluginName}-${ruleName}`;
};

//#endregion
//#region src/get-id.ts
let id = 0n;
const getId = () => (id++).toString();

//#endregion
//#region src/get-react-version.ts
const _require = node_module.default.createRequire(require("url").pathToFileURL(__filename).href);
function getReactVersion(fallback) {
	try {
		return (0, ts_pattern.match)(_require("react")).with({ version: ts_pattern.P.select(ts_pattern.P.string) }, __eslint_react_eff.identity).otherwise(() => fallback);
	} catch {
		return fallback;
	}
}

//#endregion
//#region src/settings.ts
const CustomComponentPropSchema = zod_v4.z.object({
	name: zod_v4.z.string(),
	as: zod_v4.z.optional(zod_v4.z.string()),
	controlled: zod_v4.z.optional(zod_v4.z.boolean()),
	defaultValue: zod_v4.z.optional(zod_v4.z.string())
});
/**
* @description
* This will provide some key information to the rule before checking for user-defined components.
* For example:
* Which prop is used as the `href` prop for the user-defined `Link` component that represents the built-in `a` element.
*/
const CustomComponentSchema = zod_v4.z.object({
	name: zod_v4.z.string(),
	as: zod_v4.z.optional(zod_v4.z.string()),
	attributes: zod_v4.z.optional(zod_v4.z.array(CustomComponentPropSchema)),
	selector: zod_v4.z.optional(zod_v4.z.string())
});
const CustomHooksSchema = zod_v4.z.object({
	use: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useActionState: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useCallback: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useContext: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useDebugValue: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useDeferredValue: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useEffect: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useFormStatus: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useId: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useImperativeHandle: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useInsertionEffect: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useLayoutEffect: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useMemo: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useOptimistic: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useReducer: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useRef: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useState: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useSyncExternalStore: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string())),
	useTransition: zod_v4.z.optional(zod_v4.z.array(zod_v4.z.string()))
});
/**
* @internal
*/
const ESLintReactSettingsSchema = zod_v4.z.object({
	importSource: zod_v4.z.optional(zod_v4.z.string()),
	jsxPragma: zod_v4.z.optional(zod_v4.z.string()),
	jsxPragmaFrag: zod_v4.z.optional(zod_v4.z.string()),
	polymorphicPropName: zod_v4.z.optional(zod_v4.z.string()),
	strict: zod_v4.z.optional(zod_v4.z.boolean()),
	skipImportCheck: zod_v4.z.optional(zod_v4.z.boolean()),
	version: zod_v4.z.optional(zod_v4.z.string()),
	additionalHooks: zod_v4.z.optional(CustomHooksSchema),
	additionalComponents: zod_v4.z.optional(zod_v4.z.array(CustomComponentSchema))
});
/**
* @internal
*/
const ESLintSettingsSchema = zod_v4.z.optional(zod_v4.z.object({ "react-x": zod_v4.z.optional(zod_v4.z.unknown()) }));
function isESLintSettings(settings) {
	return ESLintSettingsSchema.safeParse(settings).success;
}
function isESLintReactSettings(settings) {
	return ESLintReactSettingsSchema.safeParse(settings).success;
}
/**
* The default ESLint settings for "react-x".
*/
const DEFAULT_ESLINT_REACT_SETTINGS = {
	version: "detect",
	importSource: "react",
	strict: true,
	skipImportCheck: true,
	polymorphicPropName: "as",
	additionalComponents: [],
	additionalHooks: {
		useEffect: ["useIsomorphicLayoutEffect"],
		useLayoutEffect: ["useIsomorphicLayoutEffect"]
	}
};
const DEFAULT_ESLINT_SETTINGS = { "react-x": DEFAULT_ESLINT_REACT_SETTINGS };
const coerceESLintSettings = (settings) => {
	return settings;
};
const decodeESLintSettings = (settings) => {
	if (isESLintSettings(settings)) return settings;
	return DEFAULT_ESLINT_SETTINGS;
};
const coerceSettings = (settings) => {
	return settings;
};
const decodeSettings = (settings) => {
	if (isESLintReactSettings(settings)) return settings;
	return DEFAULT_ESLINT_REACT_SETTINGS;
};
const normalizeSettings = ({ additionalComponents = [], additionalHooks = {}, importSource = "react", polymorphicPropName = "as", skipImportCheck = true, strict = true, version,...rest }) => {
	return {
		...rest,
		components: additionalComponents.map((component) => {
			const { name, as = name, attributes = [],...rest$1 } = component;
			const re = __eslint_react_kit.RegExp.toRegExp(name);
			return {
				...rest$1,
				name,
				re,
				as,
				attributes: attributes.map(({ name: name$1, as: as$1 = name$1,...rest$2 }) => ({
					...rest$2,
					name: name$1,
					as: as$1
				}))
			};
		}),
		additionalHooks,
		importSource,
		polymorphicPropName,
		skipImportCheck,
		strict,
		version: (0, ts_pattern.match)(version).with(ts_pattern.P.union(ts_pattern.P.nullish, "", "detect"), () => getReactVersion("19.1.0")).otherwise(__eslint_react_eff.identity)
	};
};
const cache = /* @__PURE__ */ new Map();
function getSettingsFromContext(context) {
	const settings = context.settings;
	return (0, __eslint_react_eff.getOrElseUpdate)(cache, settings["react-x"], () => normalizeSettings(decodeSettings(settings["react-x"])));
}
/**
* A helper function to define settings for "react-x" with type checking in JavaScript files.
* @param settings The settings.
* @returns The settings.
*/
const defineSettings = __eslint_react_eff.identity;

//#endregion
exports.CustomComponentPropSchema = CustomComponentPropSchema;
exports.CustomComponentSchema = CustomComponentSchema;
exports.CustomHooksSchema = CustomHooksSchema;
exports.DEFAULT_ESLINT_REACT_SETTINGS = DEFAULT_ESLINT_REACT_SETTINGS;
exports.DEFAULT_ESLINT_SETTINGS = DEFAULT_ESLINT_SETTINGS;
exports.ESLintReactSettingsSchema = ESLintReactSettingsSchema;
exports.ESLintSettingsSchema = ESLintSettingsSchema;
exports.GITHUB_URL = GITHUB_URL;
exports.NPM_SCOPE = NPM_SCOPE;
exports.WEBSITE_URL = WEBSITE_URL;
exports.coerceESLintSettings = coerceESLintSettings;
exports.coerceSettings = coerceSettings;
exports.decodeESLintSettings = decodeESLintSettings;
exports.decodeSettings = decodeSettings;
exports.defineSettings = defineSettings;
exports.getConfigAdapters = getConfigAdapters;
exports.getDocsUrl = getDocsUrl;
exports.getId = getId;
exports.getReactVersion = getReactVersion;
exports.getSettingsFromContext = getSettingsFromContext;
exports.isESLintReactSettings = isESLintReactSettings;
exports.isESLintSettings = isESLintSettings;
exports.normalizeSettings = normalizeSettings;