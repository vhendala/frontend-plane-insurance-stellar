import module from "node:module";
import { getOrElseUpdate, identity } from "@eslint-react/eff";
import { P, match } from "ts-pattern";
import { RegExp } from "@eslint-react/kit";
import { z } from "zod/v4";

//#region src/constants.ts
/**
* The NPM scope for this project.
*/
const NPM_SCOPE = "@eslint-react";
/**
* The GitHub repository for this project.
*/
const GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
/**
* The URL to the project's website.
*/
const WEBSITE_URL = "https://eslint-react.xyz";

//#endregion
//#region src/get-config-adapters.ts
function getConfigAdapters(pluginName, plugin) {
	function toFlatConfig(config) {
		return {
			...config,
			plugins: { [pluginName]: plugin }
		};
	}
	function toLegacyConfig({ rules }) {
		return {
			plugins: [pluginName],
			rules
		};
	}
	return {
		toFlatConfig,
		toLegacyConfig
	};
}

//#endregion
//#region src/get-doc-url.ts
/**
* Get the URL for the documentation of a rule in a plugin.
* @internal
* @param pluginName The name of the plugin.
* @returns The URL for the documentation of a rule.
*/
const getDocsUrl = (pluginName) => (ruleName) => {
	if (pluginName === "x") return `${WEBSITE_URL}/docs/rules/${ruleName}`;
	return `${WEBSITE_URL}/docs/rules/${pluginName}-${ruleName}`;
};

//#endregion
//#region src/get-id.ts
let id = 0n;
const getId = () => (id++).toString();

//#endregion
//#region src/get-react-version.ts
const _require = module.createRequire(import.meta.url);
function getReactVersion(fallback) {
	try {
		return match(_require("react")).with({ version: P.select(P.string) }, identity).otherwise(() => fallback);
	} catch {
		return fallback;
	}
}

//#endregion
//#region src/settings.ts
const CustomComponentPropSchema = z.object({
	name: z.string(),
	as: z.optional(z.string()),
	controlled: z.optional(z.boolean()),
	defaultValue: z.optional(z.string())
});
/**
* @description
* This will provide some key information to the rule before checking for user-defined components.
* For example:
* Which prop is used as the `href` prop for the user-defined `Link` component that represents the built-in `a` element.
*/
const CustomComponentSchema = z.object({
	name: z.string(),
	as: z.optional(z.string()),
	attributes: z.optional(z.array(CustomComponentPropSchema)),
	selector: z.optional(z.string())
});
const CustomHooksSchema = z.object({
	use: z.optional(z.array(z.string())),
	useActionState: z.optional(z.array(z.string())),
	useCallback: z.optional(z.array(z.string())),
	useContext: z.optional(z.array(z.string())),
	useDebugValue: z.optional(z.array(z.string())),
	useDeferredValue: z.optional(z.array(z.string())),
	useEffect: z.optional(z.array(z.string())),
	useFormStatus: z.optional(z.array(z.string())),
	useId: z.optional(z.array(z.string())),
	useImperativeHandle: z.optional(z.array(z.string())),
	useInsertionEffect: z.optional(z.array(z.string())),
	useLayoutEffect: z.optional(z.array(z.string())),
	useMemo: z.optional(z.array(z.string())),
	useOptimistic: z.optional(z.array(z.string())),
	useReducer: z.optional(z.array(z.string())),
	useRef: z.optional(z.array(z.string())),
	useState: z.optional(z.array(z.string())),
	useSyncExternalStore: z.optional(z.array(z.string())),
	useTransition: z.optional(z.array(z.string()))
});
/**
* @internal
*/
const ESLintReactSettingsSchema = z.object({
	importSource: z.optional(z.string()),
	jsxPragma: z.optional(z.string()),
	jsxPragmaFrag: z.optional(z.string()),
	polymorphicPropName: z.optional(z.string()),
	strict: z.optional(z.boolean()),
	skipImportCheck: z.optional(z.boolean()),
	version: z.optional(z.string()),
	additionalHooks: z.optional(CustomHooksSchema),
	additionalComponents: z.optional(z.array(CustomComponentSchema))
});
/**
* @internal
*/
const ESLintSettingsSchema = z.optional(z.object({ "react-x": z.optional(z.unknown()) }));
function isESLintSettings(settings) {
	return ESLintSettingsSchema.safeParse(settings).success;
}
function isESLintReactSettings(settings) {
	return ESLintReactSettingsSchema.safeParse(settings).success;
}
/**
* The default ESLint settings for "react-x".
*/
const DEFAULT_ESLINT_REACT_SETTINGS = {
	version: "detect",
	importSource: "react",
	strict: true,
	skipImportCheck: true,
	polymorphicPropName: "as",
	additionalComponents: [],
	additionalHooks: {
		useEffect: ["useIsomorphicLayoutEffect"],
		useLayoutEffect: ["useIsomorphicLayoutEffect"]
	}
};
const DEFAULT_ESLINT_SETTINGS = { "react-x": DEFAULT_ESLINT_REACT_SETTINGS };
const coerceESLintSettings = (settings) => {
	return settings;
};
const decodeESLintSettings = (settings) => {
	if (isESLintSettings(settings)) return settings;
	return DEFAULT_ESLINT_SETTINGS;
};
const coerceSettings = (settings) => {
	return settings;
};
const decodeSettings = (settings) => {
	if (isESLintReactSettings(settings)) return settings;
	return DEFAULT_ESLINT_REACT_SETTINGS;
};
const normalizeSettings = ({ additionalComponents = [], additionalHooks = {}, importSource = "react", polymorphicPropName = "as", skipImportCheck = true, strict = true, version,...rest }) => {
	return {
		...rest,
		components: additionalComponents.map((component) => {
			const { name, as = name, attributes = [],...rest$1 } = component;
			const re = RegExp.toRegExp(name);
			return {
				...rest$1,
				name,
				re,
				as,
				attributes: attributes.map(({ name: name$1, as: as$1 = name$1,...rest$2 }) => ({
					...rest$2,
					name: name$1,
					as: as$1
				}))
			};
		}),
		additionalHooks,
		importSource,
		polymorphicPropName,
		skipImportCheck,
		strict,
		version: match(version).with(P.union(P.nullish, "", "detect"), () => getReactVersion("19.1.0")).otherwise(identity)
	};
};
const cache = /* @__PURE__ */ new Map();
function getSettingsFromContext(context) {
	const settings = context.settings;
	return getOrElseUpdate(cache, settings["react-x"], () => normalizeSettings(decodeSettings(settings["react-x"])));
}
/**
* A helper function to define settings for "react-x" with type checking in JavaScript files.
* @param settings The settings.
* @returns The settings.
*/
const defineSettings = identity;

//#endregion
export { CustomComponentPropSchema, CustomComponentSchema, CustomHooksSchema, DEFAULT_ESLINT_REACT_SETTINGS, DEFAULT_ESLINT_SETTINGS, ESLintReactSettingsSchema, ESLintSettingsSchema, GITHUB_URL, NPM_SCOPE, WEBSITE_URL, coerceESLintSettings, coerceSettings, decodeESLintSettings, decodeSettings, defineSettings, getConfigAdapters, getDocsUrl, getId, getReactVersion, getSettingsFromContext, isESLintReactSettings, isESLintSettings, normalizeSettings };