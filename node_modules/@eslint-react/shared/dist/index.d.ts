import * as _eslint_react_kit0 from "@eslint-react/kit";
import { CompatibleConfig, CompatiblePlugin, RuleContext } from "@eslint-react/kit";
import { unit } from "@eslint-react/eff";
import { PartialDeep } from "type-fest";
import { z } from "zod/v4";

//#region src/constants.d.ts
/**
 * The NPM scope for this project.
 */
declare const NPM_SCOPE = "@eslint-react";
/**
 * The GitHub repository for this project.
 */
declare const GITHUB_URL = "https://github.com/Rel1cx/eslint-react";
/**
 * The URL to the project's website.
 */
declare const WEBSITE_URL = "https://eslint-react.xyz";
//#endregion
//#region src/get-config-adapters.d.ts
declare function getConfigAdapters(pluginName: string, plugin: CompatiblePlugin): {
  readonly toFlatConfig: (config: CompatibleConfig) => {
    plugins: {
      [pluginName]: CompatiblePlugin;
    };
    name?: string;
    rules?: Record<string, _eslint_react_kit0.RuleConfig>;
    settings?: _eslint_react_kit0.SettingsConfig;
  };
  readonly toLegacyConfig: ({
    rules
  }: CompatibleConfig) => {
    plugins: string[];
    rules: Record<string, _eslint_react_kit0.RuleConfig<unknown[]>> | undefined;
  };
};
//#endregion
//#region src/get-doc-url.d.ts
/**
 * Get the URL for the documentation of a rule in a plugin.
 * @internal
 * @param pluginName The name of the plugin.
 * @returns The URL for the documentation of a rule.
 */
declare const getDocsUrl: (pluginName: string) => (ruleName: string) => string;
//#endregion
//#region src/get-id.d.ts
declare const getId: () => string;
//#endregion
//#region src/get-react-version.d.ts
declare function getReactVersion(fallback: string): string;
//#endregion
//#region src/settings.d.ts
declare const CustomComponentPropSchema: z.ZodObject<{
  name: z.ZodString;
  as: z.ZodOptional<z.ZodString>;
  controlled: z.ZodOptional<z.ZodBoolean>;
  defaultValue: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
/**
 * @description
 * This will provide some key information to the rule before checking for user-defined components.
 * For example:
 * Which prop is used as the `href` prop for the user-defined `Link` component that represents the built-in `a` element.
 */
declare const CustomComponentSchema: z.ZodObject<{
  name: z.ZodString;
  as: z.ZodOptional<z.ZodString>;
  attributes: z.ZodOptional<z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    as: z.ZodOptional<z.ZodString>;
    controlled: z.ZodOptional<z.ZodBoolean>;
    defaultValue: z.ZodOptional<z.ZodString>;
  }, z.core.$strip>>>;
  selector: z.ZodOptional<z.ZodString>;
}, z.core.$strip>;
declare const CustomHooksSchema: z.ZodObject<{
  use: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useActionState: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useCallback: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useContext: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useDebugValue: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useDeferredValue: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useFormStatus: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useId: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useImperativeHandle: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useInsertionEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useLayoutEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useMemo: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useOptimistic: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useReducer: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useRef: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useState: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useSyncExternalStore: z.ZodOptional<z.ZodArray<z.ZodString>>;
  useTransition: z.ZodOptional<z.ZodArray<z.ZodString>>;
}, z.core.$strip>;
/**
 * @internal
 */
declare const ESLintReactSettingsSchema: z.ZodObject<{
  importSource: z.ZodOptional<z.ZodString>;
  jsxPragma: z.ZodOptional<z.ZodString>;
  jsxPragmaFrag: z.ZodOptional<z.ZodString>;
  polymorphicPropName: z.ZodOptional<z.ZodString>;
  strict: z.ZodOptional<z.ZodBoolean>;
  skipImportCheck: z.ZodOptional<z.ZodBoolean>;
  version: z.ZodOptional<z.ZodString>;
  additionalHooks: z.ZodOptional<z.ZodObject<{
    use: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useActionState: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useCallback: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useContext: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useDebugValue: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useDeferredValue: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useFormStatus: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useId: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useImperativeHandle: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useInsertionEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useLayoutEffect: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useMemo: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useOptimistic: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useReducer: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useRef: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useState: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useSyncExternalStore: z.ZodOptional<z.ZodArray<z.ZodString>>;
    useTransition: z.ZodOptional<z.ZodArray<z.ZodString>>;
  }, z.core.$strip>>;
  additionalComponents: z.ZodOptional<z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    as: z.ZodOptional<z.ZodString>;
    attributes: z.ZodOptional<z.ZodArray<z.ZodObject<{
      name: z.ZodString;
      as: z.ZodOptional<z.ZodString>;
      controlled: z.ZodOptional<z.ZodBoolean>;
      defaultValue: z.ZodOptional<z.ZodString>;
    }, z.core.$strip>>>;
    selector: z.ZodOptional<z.ZodString>;
  }, z.core.$strip>>>;
}, z.core.$strip>;
/**
 * @internal
 */
declare const ESLintSettingsSchema: z.ZodOptional<z.ZodObject<{
  "react-x": z.ZodOptional<z.ZodUnknown>;
}, z.core.$strip>>;
type CustomComponent = z.infer<typeof CustomComponentSchema>;
type CustomComponentProp = z.infer<typeof CustomComponentPropSchema>;
type CustomHooks = z.infer<typeof CustomHooksSchema>;
type ESLintSettings = z.infer<typeof ESLintSettingsSchema>;
type ESLintReactSettings = z.infer<typeof ESLintReactSettingsSchema>;
declare function isESLintSettings(settings: unknown): settings is ESLintSettings;
declare function isESLintReactSettings(settings: unknown): settings is ESLintReactSettings;
/**
 * The default ESLint settings for "react-x".
 */
declare const DEFAULT_ESLINT_REACT_SETTINGS: {
  readonly version: "detect";
  readonly importSource: "react";
  readonly strict: true;
  readonly skipImportCheck: true;
  readonly polymorphicPropName: "as";
  readonly additionalComponents: [];
  readonly additionalHooks: {
    readonly useEffect: ["useIsomorphicLayoutEffect"];
    readonly useLayoutEffect: ["useIsomorphicLayoutEffect"];
  };
};
declare const DEFAULT_ESLINT_SETTINGS: {
  readonly "react-x": {
    readonly version: "detect";
    readonly importSource: "react";
    readonly strict: true;
    readonly skipImportCheck: true;
    readonly polymorphicPropName: "as";
    readonly additionalComponents: [];
    readonly additionalHooks: {
      readonly useEffect: ["useIsomorphicLayoutEffect"];
      readonly useLayoutEffect: ["useIsomorphicLayoutEffect"];
    };
  };
};
interface CustomComponentPropNormalized {
  name: string;
  as: string;
  defaultValue?: string | unit;
}
interface CustomComponentNormalized {
  name: string;
  as: string;
  attributes: CustomComponentPropNormalized[];
  re: {
    test(s: string): boolean;
  };
}
interface ESLintReactSettingsNormalized {
  additionalHooks: CustomHooks;
  components: CustomComponentNormalized[];
  importSource: string;
  polymorphicPropName: string | unit;
  skipImportCheck: boolean;
  strict: boolean;
  version: string;
}
declare const coerceESLintSettings: (settings: unknown) => PartialDeep<ESLintSettings>;
declare const decodeESLintSettings: (settings: unknown) => ESLintSettings;
declare const coerceSettings: (settings: unknown) => PartialDeep<ESLintReactSettings>;
declare const decodeSettings: (settings: unknown) => ESLintReactSettings;
declare const normalizeSettings: ({
  additionalComponents,
  additionalHooks,
  importSource,
  polymorphicPropName,
  skipImportCheck,
  strict,
  version,
  ...rest
}: ESLintReactSettings) => {
  readonly components: {
    name: string;
    re: {
      test(s: string): boolean;
    };
    as: string;
    attributes: {
      name: string;
      as: string;
      controlled?: boolean | undefined;
      defaultValue?: string | undefined;
    }[];
    selector?: string | undefined;
  }[];
  readonly additionalHooks: {
    use?: string[] | undefined;
    useActionState?: string[] | undefined;
    useCallback?: string[] | undefined;
    useContext?: string[] | undefined;
    useDebugValue?: string[] | undefined;
    useDeferredValue?: string[] | undefined;
    useEffect?: string[] | undefined;
    useFormStatus?: string[] | undefined;
    useId?: string[] | undefined;
    useImperativeHandle?: string[] | undefined;
    useInsertionEffect?: string[] | undefined;
    useLayoutEffect?: string[] | undefined;
    useMemo?: string[] | undefined;
    useOptimistic?: string[] | undefined;
    useReducer?: string[] | undefined;
    useRef?: string[] | undefined;
    useState?: string[] | undefined;
    useSyncExternalStore?: string[] | undefined;
    useTransition?: string[] | undefined;
  };
  readonly importSource: string;
  readonly polymorphicPropName: string;
  readonly skipImportCheck: boolean;
  readonly strict: boolean;
  readonly version: string;
  readonly jsxPragma?: string | undefined;
  readonly jsxPragmaFrag?: string | undefined;
};
declare function getSettingsFromContext(context: RuleContext): ESLintReactSettingsNormalized;
/**
 * A helper function to define settings for "react-x" with type checking in JavaScript files.
 * @param settings The settings.
 * @returns The settings.
 */
declare const defineSettings: (settings: ESLintReactSettings) => ESLintReactSettings;
declare module "@typescript-eslint/utils/ts-eslint" {
  interface SharedConfigurationSettings {
    ["react-x"]?: Partial<ESLintReactSettings>;
  }
}
//#endregion
export { CustomComponent, CustomComponentNormalized, CustomComponentProp, CustomComponentPropNormalized, CustomComponentPropSchema, CustomComponentSchema, CustomHooks, CustomHooksSchema, DEFAULT_ESLINT_REACT_SETTINGS, DEFAULT_ESLINT_SETTINGS, ESLintReactSettings, ESLintReactSettingsNormalized, ESLintReactSettingsSchema, ESLintSettings, ESLintSettingsSchema, GITHUB_URL, NPM_SCOPE, WEBSITE_URL, coerceESLintSettings, coerceSettings, decodeESLintSettings, decodeSettings, defineSettings, getConfigAdapters, getDocsUrl, getId, getReactVersion, getSettingsFromContext, isESLintReactSettings, isESLintSettings, normalizeSettings };