//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));

//#endregion
let __typescript_eslint_types = require("@typescript-eslint/types");
__typescript_eslint_types = __toESM(__typescript_eslint_types);
let __eslint_react_eff = require("@eslint-react/eff");
__eslint_react_eff = __toESM(__eslint_react_eff);
let __typescript_eslint_utils = require("@typescript-eslint/utils");
__typescript_eslint_utils = __toESM(__typescript_eslint_utils);
let __typescript_eslint_typescript_estree = require("@typescript-eslint/typescript-estree");
__typescript_eslint_typescript_estree = __toESM(__typescript_eslint_typescript_estree);
let string_ts = require("string-ts");
string_ts = __toESM(string_ts);

//#region src/ast-array-method.ts
function isArrayFromCall(node, loose = true) {
	if (node.type !== __typescript_eslint_types.AST_NODE_TYPES.CallExpression) return false;
	if (node.callee.type !== __typescript_eslint_types.AST_NODE_TYPES.MemberExpression) return false;
	if (node.callee.property.type !== __typescript_eslint_types.AST_NODE_TYPES.Identifier) return false;
	const name = node.callee.property.name;
	return name === "from" || loose && name.startsWith("from");
}
function isArrayMapCall(node, loose = true) {
	if (node.type !== __typescript_eslint_types.AST_NODE_TYPES.CallExpression) return false;
	if (node.callee.type !== __typescript_eslint_types.AST_NODE_TYPES.MemberExpression) return false;
	if (node.callee.property.type !== __typescript_eslint_types.AST_NODE_TYPES.Identifier) return false;
	const name = node.callee.property.name;
	return name === "map" || loose && name.endsWith("Map");
}

//#endregion
//#region src/ast-array-method-callback.ts
const indexParamPosition = new Map([
	["every", 1],
	["filter", 1],
	["find", 1],
	["findIndex", 1],
	["findLast", 1],
	["findLastIndex", 1],
	["flatMap", 1],
	["forEach", 1],
	["map", 1],
	["reduce", 2],
	["reduceRight", 2],
	["some", 1]
]);
function getArrayMethodCallbackIndexParamPosition(methodName) {
	return indexParamPosition.get(methodName) ?? -1;
}

//#endregion
//#region src/ast-class-id.ts
/**
* Gets class identifier from ClassDeclaration or ClassExpression
* @param node The AST node to check
* @returns class identifier or null
*/
function getClassId(node) {
	if (node.id != null) return node.id;
	if (node.parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator && node.parent.id.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier) return node.parent.id;
	return __eslint_react_eff.unit;
}

//#endregion
//#region src/ast-is.ts
const is = __typescript_eslint_utils.ASTUtils.isNodeOfType;
const isOneOf = __typescript_eslint_utils.ASTUtils.isNodeOfTypes;
const isFunction = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.ArrowFunctionExpression,
	__typescript_eslint_types.AST_NODE_TYPES.FunctionDeclaration,
	__typescript_eslint_types.AST_NODE_TYPES.FunctionExpression
]);
const isFunctionType = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.ArrowFunctionExpression,
	__typescript_eslint_types.AST_NODE_TYPES.FunctionDeclaration,
	__typescript_eslint_types.AST_NODE_TYPES.FunctionExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSCallSignatureDeclaration,
	__typescript_eslint_types.AST_NODE_TYPES.TSConstructSignatureDeclaration,
	__typescript_eslint_types.AST_NODE_TYPES.TSDeclareFunction,
	__typescript_eslint_types.AST_NODE_TYPES.TSEmptyBodyFunctionExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSFunctionType,
	__typescript_eslint_types.AST_NODE_TYPES.TSMethodSignature
]);
const isClass = isOneOf([__typescript_eslint_types.AST_NODE_TYPES.ClassDeclaration, __typescript_eslint_types.AST_NODE_TYPES.ClassExpression]);
const isMethodOrProperty = isOneOf([__typescript_eslint_types.AST_NODE_TYPES.PropertyDefinition, __typescript_eslint_types.AST_NODE_TYPES.MethodDefinition]);
const isProperty = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.PropertyDefinition,
	__typescript_eslint_types.AST_NODE_TYPES.TSIndexSignature,
	__typescript_eslint_types.AST_NODE_TYPES.TSParameterProperty,
	__typescript_eslint_types.AST_NODE_TYPES.TSPropertySignature
]);
const isJSXElement = is(__typescript_eslint_types.AST_NODE_TYPES.JSXElement);
const isJSXFragment = is(__typescript_eslint_types.AST_NODE_TYPES.JSXFragment);
const isJSXTagNameExpression = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.JSXIdentifier,
	__typescript_eslint_types.AST_NODE_TYPES.JSXMemberExpression,
	__typescript_eslint_types.AST_NODE_TYPES.JSXNamespacedName
]);
const isJSX = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.JSXAttribute,
	__typescript_eslint_types.AST_NODE_TYPES.JSXClosingElement,
	__typescript_eslint_types.AST_NODE_TYPES.JSXClosingFragment,
	__typescript_eslint_types.AST_NODE_TYPES.JSXElement,
	__typescript_eslint_types.AST_NODE_TYPES.JSXEmptyExpression,
	__typescript_eslint_types.AST_NODE_TYPES.JSXExpressionContainer,
	__typescript_eslint_types.AST_NODE_TYPES.JSXFragment,
	__typescript_eslint_types.AST_NODE_TYPES.JSXIdentifier,
	__typescript_eslint_types.AST_NODE_TYPES.JSXMemberExpression,
	__typescript_eslint_types.AST_NODE_TYPES.JSXNamespacedName,
	__typescript_eslint_types.AST_NODE_TYPES.JSXOpeningElement,
	__typescript_eslint_types.AST_NODE_TYPES.JSXOpeningFragment,
	__typescript_eslint_types.AST_NODE_TYPES.JSXSpreadAttribute,
	__typescript_eslint_types.AST_NODE_TYPES.JSXSpreadChild,
	__typescript_eslint_types.AST_NODE_TYPES.JSXText
]);
const isLoop = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.DoWhileStatement,
	__typescript_eslint_types.AST_NODE_TYPES.ForInStatement,
	__typescript_eslint_types.AST_NODE_TYPES.ForOfStatement,
	__typescript_eslint_types.AST_NODE_TYPES.ForStatement,
	__typescript_eslint_types.AST_NODE_TYPES.WhileStatement
]);
const isTypeExpression = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.TSAsExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSTypeAssertion,
	__typescript_eslint_types.AST_NODE_TYPES.TSNonNullExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSSatisfiesExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSInstantiationExpression
]);
const isTypeAssertionExpression = isOneOf([
	__typescript_eslint_types.AST_NODE_TYPES.TSAsExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSTypeAssertion,
	__typescript_eslint_types.AST_NODE_TYPES.TSNonNullExpression,
	__typescript_eslint_types.AST_NODE_TYPES.TSSatisfiesExpression
]);

//#endregion
//#region src/ast-expression.ts
/**
* Recursively get the inner expression until it's not a TypeExpression
* @param node - The node to get the expression from
* @returns The inner expression
*/
function getJSExpression(node) {
	if (isTypeExpression(node)) return getJSExpression(node.expression);
	return node;
}
function isThisExpression(node) {
	return getJSExpression(node).type === __typescript_eslint_types.AST_NODE_TYPES.ThisExpression;
}

//#endregion
//#region src/ast-function-id.ts
function getFunctionId(node) {
	switch (true) {
		case "id" in node && node.id != null: return node.id;
		case node.parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator && node.parent.init === node && node.parent.id.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return node.parent.id;
		case node.parent.type === __typescript_eslint_types.AST_NODE_TYPES.AssignmentExpression && node.parent.right === node && node.parent.operator === "=" && node.parent.left.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return node.parent.left;
		case node.parent.type === __typescript_eslint_types.AST_NODE_TYPES.Property && node.parent.value === node && !node.parent.computed && node.parent.key.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return node.parent.key;
		case isMethodOrProperty(node.parent) && node.parent.value === node && node.parent.key.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return node.parent.key;
		case node.parent.type === __typescript_eslint_types.AST_NODE_TYPES.AssignmentPattern && node.parent.right === node && node.parent.left.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return node.parent.left;
		case isTypeAssertionExpression(node.parent): return getFunctionId(node.parent);
	}
	return __eslint_react_eff.unit;
}

//#endregion
//#region src/ast-function-init-path.ts
function getFunctionInitPath(node) {
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.FunctionDeclaration) return [node];
	const { parent } = node;
	switch (true) {
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent,
			parent,
			node
		];
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.CallExpression && parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.CallExpression && parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.CallExpression && parent.parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent.parent,
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.Property && parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.ObjectExpression && parent.parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.VariableDeclarator: return [
			parent.parent.parent.parent,
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.MethodDefinition && parent.parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.ClassDeclaration: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
		case parent.type === __typescript_eslint_types.AST_NODE_TYPES.PropertyDefinition && parent.parent.parent.type === __typescript_eslint_types.AST_NODE_TYPES.ClassDeclaration: return [
			parent.parent.parent,
			parent.parent,
			parent,
			node
		];
	}
	return __eslint_react_eff.unit;
}
function hasCallInFunctionInitPath(callName, initPath) {
	return initPath.some((n) => {
		if (n.type !== __typescript_eslint_types.AST_NODE_TYPES.CallExpression) return false;
		switch (n.callee.type) {
			case __typescript_eslint_types.AST_NODE_TYPES.Identifier: return n.callee.name === callName;
			case __typescript_eslint_types.AST_NODE_TYPES.MemberExpression: return "name" in n.callee.property && n.callee.property.name === callName;
			default: return false;
		}
	});
}

//#endregion
//#region src/ast-function-is.ts
function isEmptyFunction(node) {
	return node.body.type === __typescript_eslint_types.AST_NODE_TYPES.BlockStatement && node.body.body.length === 0;
}

//#endregion
//#region src/ast-hierarchy.ts
function findParentNode(node, test) {
	if (node == null) return __eslint_react_eff.unit;
	let parent = node.parent;
	while (parent != null && parent.type !== __typescript_eslint_types.AST_NODE_TYPES.Program) {
		if (test(parent)) return parent;
		parent = parent.parent;
	}
	return __eslint_react_eff.unit;
}
/**
* Get all nested identifiers in a expression like node
* @param node The node to get the nested identifiers from
* @returns All nested identifiers
*/
function getNestedIdentifiers(node) {
	const identifiers = [];
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier) identifiers.push(node);
	if ("arguments" in node) {
		const chunk = node.arguments.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("elements" in node) {
		const chunk = node.elements.filter((x) => x != null).map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("properties" in node) {
		const chunk = node.properties.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("expressions" in node) {
		const chunk = node.expressions.map(getNestedIdentifiers).flat(1);
		identifiers.push(...chunk);
	}
	if ("left" in node) {
		const chunk = getNestedIdentifiers(node.left);
		identifiers.push(...chunk);
	}
	if ("right" in node) {
		const chunk = getNestedIdentifiers(node.right);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Property) {
		const chunk = getNestedIdentifiers(node.value);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.SpreadElement) {
		const chunk = getNestedIdentifiers(node.argument);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression) {
		const chunk = getNestedIdentifiers(node.object);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.UnaryExpression) {
		const chunk = getNestedIdentifiers(node.argument);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.ChainExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSNonNullExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSAsExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSSatisfiesExpression) {
		const chunk = getNestedIdentifiers(node.expression);
		identifiers.push(...chunk);
	}
	return identifiers;
}
/**
* Gets the nested return statements in the node that are within the same function
* @param node The AST node
* @returns The nested return statements in the node
*/
function getNestedReturnStatements(node) {
	const statements = [];
	const boundaryNode = isFunction(node) ? node : findParentNode(node, isFunction);
	(0, __typescript_eslint_typescript_estree.simpleTraverse)(node, { enter(node$1) {
		if (node$1.type !== __typescript_eslint_types.AST_NODE_TYPES.ReturnStatement) return;
		if (findParentNode(node$1, isFunction) !== boundaryNode) return;
		statements.push(node$1);
	} });
	return statements;
}
/**
* Get all nested expressions of type T in an expression like node
* @param type The type of the expression to retrieve within the node
* @returns A partially applied function bound to a predicate of type T. The returned function can be called passing a
* node, and it will return an array of all nested expressions of type T.
*/
function getNestedExpressionsOfType(type) {
	const isNodeOfType = is(type);
	return function(node) {
		const boundGetNestedExpressionsOfType = getNestedExpressionsOfType(type);
		const expressions = [];
		if (isNodeOfType(node)) expressions.push(node);
		if ("arguments" in node) {
			const chunk = node.arguments.map(getNestedExpressionsOfType(type)).flat(1);
			expressions.push(...chunk);
		}
		if ("expression" in node && node.expression !== true && node.expression !== false) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if ("left" in node) {
			const chunk = boundGetNestedExpressionsOfType(node.left);
			expressions.push(...chunk);
		}
		if ("right" in node) {
			const chunk = boundGetNestedExpressionsOfType(node.right);
			expressions.push(...chunk);
		}
		if ("test" in node && node.test != null) {
			const chunk = boundGetNestedExpressionsOfType(node.test);
			expressions.push(...chunk);
		}
		if ("consequent" in node) {
			const chunk = Array.isArray(node.consequent) ? node.consequent.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.consequent);
			expressions.push(...chunk);
		}
		if ("alternate" in node && node.alternate != null) {
			const chunk = Array.isArray(node.alternate) ? node.alternate.map(boundGetNestedExpressionsOfType).flat(1) : boundGetNestedExpressionsOfType(node.alternate);
			expressions.push(...chunk);
		}
		if ("elements" in node) {
			const chunk = node.elements.filter((x) => x != null).map(getNestedExpressionsOfType(type)).flat(1);
			expressions.push(...chunk);
		}
		if ("properties" in node) {
			const chunk = node.properties.map(boundGetNestedExpressionsOfType).flat(1);
			expressions.push(...chunk);
		}
		if ("expressions" in node) {
			const chunk = node.expressions.map(boundGetNestedExpressionsOfType).flat(1);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Property) {
			const chunk = boundGetNestedExpressionsOfType(node.value);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.SpreadElement) {
			const chunk = boundGetNestedExpressionsOfType(node.argument);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.object);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.UnaryExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.argument);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.ChainExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSNonNullExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSAsExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TSSatisfiesExpression) {
			const chunk = boundGetNestedExpressionsOfType(node.expression);
			expressions.push(...chunk);
		}
		return expressions;
	};
}
/**
* Get all nested new expressions in an expression like node
* @param node The node to get the nested new expressions from
* @returns All nested new expressions
*/
const getNestedNewExpressions = getNestedExpressionsOfType(__typescript_eslint_types.AST_NODE_TYPES.NewExpression);
/**
* Get all nested call expressions in a expression like node
* @param node The node to get the nested call expressions from
* @returns All nested call expressions
*/
const getNestedCallExpressions = getNestedExpressionsOfType(__typescript_eslint_types.AST_NODE_TYPES.CallExpression);

//#endregion
//#region src/ast-line.ts
/**
* Check if a node is multiline
* @param node The AST node to check
* @returns  `true` if the node is multiline
*/
function isMultiLine(node) {
	return node.loc.start.line !== node.loc.end.line;
}
/**
* Check if a node is a line break
* @param node The AST node to check
* @returns boolean
*/
function isLineBreak(node) {
	return isOneOf([__typescript_eslint_types.AST_NODE_TYPES.Literal, __typescript_eslint_types.AST_NODE_TYPES.JSXText])(node) && typeof node.value === "string" && node.value.trim() === "" && isMultiLine(node);
}

//#endregion
//#region src/ast-literal-is.ts
function isLiteral(node, type) {
	if (node.type !== __typescript_eslint_types.AST_NODE_TYPES.Literal) return false;
	if (type == null) return true;
	switch (type) {
		case "boolean": return typeof node.value === "boolean";
		case "null": return node.value === null;
		case "number": return typeof node.value === "number";
		case "regexp": return "regex" in node;
		case "string": return typeof node.value === "string";
	}
}

//#endregion
//#region src/ast-node-equal.ts
/**
* Determines whether node equals to another node
* @param a node to compare
* @param b node to compare
* @returns `true` if node equal
* @see https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/src/util/isNodeEqual.ts
*/
const isNodeEqual = (0, __eslint_react_eff.dual)(2, (a, b) => {
	switch (true) {
		case a === b: return true;
		case a.type !== b.type: return false;
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.Literal && b.type === __typescript_eslint_types.AST_NODE_TYPES.Literal: return a.value === b.value;
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.TemplateElement && b.type === __typescript_eslint_types.AST_NODE_TYPES.TemplateElement: return a.value.raw === b.value.raw;
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.TemplateLiteral && b.type === __typescript_eslint_types.AST_NODE_TYPES.TemplateLiteral: {
			if (a.quasis.length !== b.quasis.length || a.expressions.length !== b.expressions.length) return false;
			let i = a.quasis.length;
			while (i--) if (a.quasis[i]?.value.raw !== b.quasis[i]?.value.raw) return false;
			i = a.expressions.length;
			while (i--) {
				const exprA = a.expressions[i];
				const exprB = b.expressions[i];
				if (!isNodeEqual(exprA, exprB)) return false;
			}
			return true;
		}
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier && b.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier: return a.name === b.name;
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.PrivateIdentifier && b.type === __typescript_eslint_types.AST_NODE_TYPES.PrivateIdentifier: return a.name === b.name;
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression && b.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression: return isNodeEqual(a.property, b.property) && isNodeEqual(a.object, b.object);
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.JSXAttribute && b.type === __typescript_eslint_types.AST_NODE_TYPES.JSXAttribute:
			if (a.name.name !== b.name.name) return false;
			if (a.value == null || b.value == null) return a.value === b.value;
			return isNodeEqual(a.value, b.value);
		case a.type === __typescript_eslint_types.AST_NODE_TYPES.ThisExpression && b.type === __typescript_eslint_types.AST_NODE_TYPES.ThisExpression: return true;
		default: return false;
	}
});

//#endregion
//#region src/ast-process-env-node-env.ts
/**
* Check if the given node is a member expression that accesses `process.env.NODE_ENV`
* @param node The AST node
* @returns True if the node is a member expression that accesses `process.env.NODE_ENV`, false otherwise
*/
function isProcessEnvNodeEnv(node) {
	return node != null && node.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression && node.object.type === __typescript_eslint_types.AST_NODE_TYPES.MemberExpression && node.object.object.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier && node.object.object.name === "process" && node.object.property.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier && node.object.property.name === "env" && node.property.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier && node.property.name === "NODE_ENV";
}
/**
* Check if the given node is a binary expression that compares `process.env.NODE_ENV` with a string literal
* @param node The AST node
* @param operator The operator used in the comparison
* @param value The string literal value to compare against
* @returns True if the node is a binary expression that compares `process.env.NODE_ENV` with the specified value, false otherwise
*/
function isProcessEnvNodeEnvCompare(node, operator, value) {
	if (node == null) return false;
	if (node.type !== __typescript_eslint_types.AST_NODE_TYPES.BinaryExpression) return false;
	if (node.operator !== operator) return false;
	if (isProcessEnvNodeEnv(node.left) && isLiteral(node.right, "string")) return node.right.value === value;
	if (isLiteral(node.left, "string") && isProcessEnvNodeEnv(node.right)) return node.left.value === value;
	return false;
}

//#endregion
//#region src/ast-property-name.ts
function getPropertyName(node) {
	if (isTypeExpression(node)) return getPropertyName(getJSExpression(node));
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Identifier || node.type === __typescript_eslint_types.AST_NODE_TYPES.PrivateIdentifier) return node.name;
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Literal) return String(node.value);
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.TemplateLiteral && node.expressions.length === 0) return node.quasis[0]?.value.raw;
	return __eslint_react_eff.unit;
}

//#endregion
//#region src/ast-to-string.ts
function getLiteralValueType(input) {
	if (input === null) return "null";
	return typeof input;
}
function toDelimiterCaseType(node, delimiter = " ") {
	if (node.type === __typescript_eslint_types.AST_NODE_TYPES.Literal) {
		if ("regex" in node) return "RegExp literal";
		return `${getLiteralValueType(node.value)} literal`;
	}
	if (isJSX(node)) return `JSX ${(0, string_ts.toLowerCase)((0, string_ts.delimiterCase)((0, string_ts.replace)(node.type, "JSX", ""), delimiter))}`;
	return (0, string_ts.toLowerCase)((0, string_ts.delimiterCase)(node.type, delimiter));
}
/**
* Returns human readable node name for given AST node
* @param node AST node
* @param getText A function that returns the text of the node in the source code
* @returns Human readable node name
*/
function toString(node, getText) {
	switch (node.type) {
		case __typescript_eslint_types.AST_NODE_TYPES.Identifier:
		case __typescript_eslint_types.AST_NODE_TYPES.JSXIdentifier:
		case __typescript_eslint_types.AST_NODE_TYPES.PrivateIdentifier: return node.name;
		case __typescript_eslint_types.AST_NODE_TYPES.MemberExpression:
		case __typescript_eslint_types.AST_NODE_TYPES.JSXMemberExpression: return `${toString(node.object, getText)}.${toString(node.property, getText)}`;
		case __typescript_eslint_types.AST_NODE_TYPES.JSXNamespacedName: return `${node.namespace.name}:${node.name.name}`;
		case __typescript_eslint_types.AST_NODE_TYPES.JSXText: return node.value;
		case __typescript_eslint_types.AST_NODE_TYPES.Literal: return node.raw;
		default: return getText(node);
	}
}

//#endregion
exports.findParentNode = findParentNode;
exports.getArrayMethodCallbackIndexParamPosition = getArrayMethodCallbackIndexParamPosition;
exports.getClassId = getClassId;
exports.getFunctionId = getFunctionId;
exports.getFunctionInitPath = getFunctionInitPath;
exports.getJSExpression = getJSExpression;
exports.getNestedCallExpressions = getNestedCallExpressions;
exports.getNestedExpressionsOfType = getNestedExpressionsOfType;
exports.getNestedIdentifiers = getNestedIdentifiers;
exports.getNestedNewExpressions = getNestedNewExpressions;
exports.getNestedReturnStatements = getNestedReturnStatements;
exports.getPropertyName = getPropertyName;
exports.hasCallInFunctionInitPath = hasCallInFunctionInitPath;
exports.is = is;
exports.isArrayFromCall = isArrayFromCall;
exports.isArrayMapCall = isArrayMapCall;
exports.isClass = isClass;
exports.isEmptyFunction = isEmptyFunction;
exports.isFunction = isFunction;
exports.isFunctionType = isFunctionType;
exports.isJSX = isJSX;
exports.isJSXElement = isJSXElement;
exports.isJSXFragment = isJSXFragment;
exports.isJSXTagNameExpression = isJSXTagNameExpression;
exports.isLineBreak = isLineBreak;
exports.isLiteral = isLiteral;
exports.isLoop = isLoop;
exports.isMethodOrProperty = isMethodOrProperty;
exports.isMultiLine = isMultiLine;
exports.isNodeEqual = isNodeEqual;
exports.isOneOf = isOneOf;
exports.isProcessEnvNodeEnv = isProcessEnvNodeEnv;
exports.isProcessEnvNodeEnvCompare = isProcessEnvNodeEnvCompare;
exports.isProperty = isProperty;
exports.isThisExpression = isThisExpression;
exports.isTypeAssertionExpression = isTypeAssertionExpression;
exports.isTypeExpression = isTypeExpression;
exports.toDelimiterCaseType = toDelimiterCaseType;
exports.toString = toString;