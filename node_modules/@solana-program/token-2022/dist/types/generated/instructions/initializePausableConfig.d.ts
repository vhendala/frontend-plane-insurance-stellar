/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_PAUSABLE_CONFIG_DISCRIMINATOR = 44;
export declare function getInitializePausableConfigDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const INITIALIZE_PAUSABLE_CONFIG_PAUSABLE_DISCRIMINATOR = 0;
export declare function getInitializePausableConfigPausableDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type InitializePausableConfigInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializePausableConfigInstructionData = {
    discriminator: number;
    pausableDiscriminator: number;
    /** The authority that can pause and resume the mint. */
    authority: Option<Address>;
};
export type InitializePausableConfigInstructionDataArgs = {
    /** The authority that can pause and resume the mint. */
    authority: OptionOrNullable<Address>;
};
export declare function getInitializePausableConfigInstructionDataEncoder(): Encoder<InitializePausableConfigInstructionDataArgs>;
export declare function getInitializePausableConfigInstructionDataDecoder(): Decoder<InitializePausableConfigInstructionData>;
export declare function getInitializePausableConfigInstructionDataCodec(): Codec<InitializePausableConfigInstructionDataArgs, InitializePausableConfigInstructionData>;
export type InitializePausableConfigInput<TAccountMint extends string = string> = {
    /** The mint. */
    mint: Address<TAccountMint>;
    authority: InitializePausableConfigInstructionDataArgs['authority'];
};
export declare function getInitializePausableConfigInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializePausableConfigInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializePausableConfigInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializePausableConfigInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint. */
        mint: TAccountMetas[0];
    };
    data: InitializePausableConfigInstructionData;
};
export declare function parseInitializePausableConfigInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePausableConfigInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializePausableConfig.d.ts.map