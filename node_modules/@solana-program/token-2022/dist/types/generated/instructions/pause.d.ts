/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const PAUSE_DISCRIMINATOR = 44;
export declare function getPauseDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export declare const PAUSE_PAUSABLE_DISCRIMINATOR = 1;
export declare function getPausePausableDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type PauseInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | IAccountMeta<string> = string, TAccountAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type PauseInstructionData = {
    discriminator: number;
    pausableDiscriminator: number;
};
export type PauseInstructionDataArgs = {};
export declare function getPauseInstructionDataEncoder(): Encoder<PauseInstructionDataArgs>;
export declare function getPauseInstructionDataDecoder(): Decoder<PauseInstructionData>;
export declare function getPauseInstructionDataCodec(): Codec<PauseInstructionDataArgs, PauseInstructionData>;
export type PauseInput<TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The mint. */
    mint: Address<TAccountMint>;
    /** The pausable authority that can pause the mint. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
};
export declare function getPauseInstruction<TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: PauseInput<TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): PauseInstruction<TProgramAddress, TAccountMint, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedPauseInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint. */
        mint: TAccountMetas[0];
        /** The pausable authority that can pause the mint. */
        authority: TAccountMetas[1];
    };
    data: PauseInstructionData;
};
export declare function parsePauseInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedPauseInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=pause.d.ts.map