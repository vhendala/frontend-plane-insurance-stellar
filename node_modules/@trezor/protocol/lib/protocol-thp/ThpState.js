"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThpState = void 0;
class ThpState {
    _properties;
    _pairingCredentials = [];
    _channel = Buffer.alloc(0);
    _sendBit = 0;
    _sendNonce = 0;
    _recvBit = 0;
    _recvNonce = 1;
    _expectedResponses = [];
    get properties() {
        return this._properties;
    }
    setThpProperties(props) {
        this._properties = props;
    }
    get pairingCredentials() {
        return this._pairingCredentials;
    }
    setPairingCredentials(credentials) {
        if (credentials) {
            this._pairingCredentials.push(...credentials);
        }
        else {
            this._pairingCredentials = [];
        }
    }
    get channel() {
        return this._channel;
    }
    setChannel(channel) {
        this._channel = channel;
    }
    get sendBit() {
        return this._sendBit;
    }
    get sendNonce() {
        return this._sendNonce;
    }
    get recvBit() {
        return this._recvBit;
    }
    get recvNonce() {
        return this._recvNonce;
    }
    updateSyncBit(type) {
        if (type === 'send') {
            this._sendBit = this._sendBit > 0 ? 0 : 1;
        }
        else {
            this._recvBit = this._recvBit > 0 ? 0 : 1;
        }
    }
    updateNonce(type) {
        if (type === 'send') {
            this._sendNonce += 1;
        }
        else {
            this._recvNonce += 1;
        }
    }
    sync(type, messageType) {
        const updateSyncBit = !['ThpCreateChannelRequest', 'ThpCreateChannelResponse'].includes(messageType);
        if (updateSyncBit) {
            this.updateSyncBit(type);
        }
        const updateNonce = updateSyncBit &&
            ![
                'ThpHandshakeInitRequest',
                'ThpHandshakeInitResponse',
                'ThpHandshakeCompletionRequest',
                'ThpHandshakeCompletionResponse',
            ].includes(messageType);
        if (updateNonce) {
            this.updateNonce(type);
        }
    }
    serialize() {
        return {
            properties: this._properties,
            channel: this.channel.toString('hex'),
            sendBit: this.sendBit,
            recvBit: this.recvBit,
            sendNonce: this.sendNonce,
            recvNonce: this.recvNonce,
            expectedResponses: this._expectedResponses.slice(0),
            credentials: this._pairingCredentials.slice(0),
        };
    }
    deserialize(json) {
        const error = new Error('ThpState.deserialize invalid state');
        if (!json || typeof json !== 'object') {
            throw error;
        }
        if (!Array.isArray(json.expectedResponses)) {
            throw error;
        }
        if (typeof json.channel !== 'string') {
            throw error;
        }
        [
            json.sendBit,
            json.recvBit,
            json.sendNonce,
            json.recvNonce,
            ...json.expectedResponses,
        ].forEach(nr => {
            if (typeof nr !== 'number') {
                throw error;
            }
        });
        this._channel = Buffer.from(json.channel, 'hex');
        this._expectedResponses = json.expectedResponses;
        this._sendBit = json.sendBit;
        this._recvBit = json.recvBit;
        this._sendNonce = json.sendNonce;
        this._recvNonce = json.recvNonce;
    }
    get expectedResponses() {
        return this._expectedResponses;
    }
    setExpectedResponses(expected) {
        this._expectedResponses = expected;
    }
    resetState() {
        this._channel = Buffer.alloc(0);
        this._sendBit = 0;
        this._sendNonce = 0;
        this._recvBit = 0;
        this._recvNonce = 1;
        this._expectedResponses = [];
        this._pairingCredentials = [];
    }
    toString() {
        return JSON.stringify(this.serialize());
    }
}
exports.ThpState = ThpState;
//# sourceMappingURL=ThpState.js.map