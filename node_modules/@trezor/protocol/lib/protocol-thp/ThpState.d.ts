import { ThpCredentials, ThpDeviceProperties, ThpMessageSyncBit } from './messages';
export type ThpStateSerialized = {
    properties?: ThpDeviceProperties;
    credentials: ThpCredentials[];
    channel: string;
    sendBit: ThpMessageSyncBit;
    recvBit: ThpMessageSyncBit;
    sendNonce: number;
    recvNonce: number;
    expectedResponses: number[];
};
export declare class ThpState {
    private _properties?;
    private _pairingCredentials;
    private _channel;
    private _sendBit;
    private _sendNonce;
    private _recvBit;
    private _recvNonce;
    private _expectedResponses;
    get properties(): ThpDeviceProperties | undefined;
    setThpProperties(props: ThpDeviceProperties): void;
    get pairingCredentials(): ThpCredentials[];
    setPairingCredentials(credentials?: ThpCredentials[]): void;
    get channel(): Buffer<ArrayBufferLike>;
    setChannel(channel: Buffer): void;
    get sendBit(): ThpMessageSyncBit;
    get sendNonce(): number;
    get recvBit(): ThpMessageSyncBit;
    get recvNonce(): number;
    updateSyncBit(type: 'send' | 'recv'): void;
    updateNonce(type: 'send' | 'recv'): void;
    sync(type: 'send' | 'recv', messageType: string): void;
    serialize(): ThpStateSerialized;
    deserialize(json: ReturnType<(typeof this)['serialize']>): void;
    get expectedResponses(): number[];
    setExpectedResponses(expected: number[]): void;
    resetState(): void;
    toString(): string;
}
//# sourceMappingURL=ThpState.d.ts.map